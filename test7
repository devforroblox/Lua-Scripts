--[[
    NotificationSystem.lua
    A sleek, modern notification system with centered design, smooth animations,
    animated red-pink gradient glowing border effect, and lowered position.
]]

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Configuration
local Config = {
    MAX_WIDTH = 300,
    MIN_WIDTH = 200,
    CORNER_RADIUS = 12,
    FONT = Enum.Font.GothamBold,
    TITLE_SIZE = 18,
    MESSAGE_SIZE = 14,
    DEFAULT_DURATION = 4,
    FADE_TIME = 0.5,
    PADDING = 16,
    MARGIN = 8,
    COLORS = {
        BACKGROUND = Color3.fromRGB(32, 34, 37),
        TEXT = Color3.fromRGB(255, 255, 255),
        ACCENT = Color3.fromRGB(255, 0, 255),
        PROGRESS = Color3.fromRGB(255, 255, 255),
        GLOW = Color3.fromRGB(255, 40, 180),
        BRIGHT_GLOW_START = Color3.fromRGB(255, 0, 85),   -- Bright Red-Pink
        BRIGHT_GLOW_END = Color3.fromRGB(255, 40, 180)    -- Bright Pink
    },
    SOUNDS = {
        SHOW = "rbxassetid://6518811702",
        HIDE = "rbxassetid://6518812167"
    }
}

-- Internal variables
local NotificationSystem = {}
local activeNotification = nil
local container = nil

-- Helper to tween color between two colors
local function tweenColor(obj, property, color1, color2, time)
    local t = 0
    local running = true
    local lastTween
    coroutine.wrap(function()
        while running and obj.Parent do
            local goal = {}
            if t % 2 == 0 then
                goal[property] = color2
            else
                goal[property] = color1
            end
            lastTween = TweenService:Create(obj, TweenInfo.new(time, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), goal)
            lastTween:Play()
            lastTween.Completed:Wait()
            t = t + 1
        end
    end)()
    return function() running = false if lastTween then pcall(function() lastTween:Cancel() end) end end
end

-- Initialize container
local function createContainer()
    if container then return container end
    
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NotificationSystem"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = playerGui
    
    container = Instance.new("Frame")
    container.Name = "NotificationContainer"
    container.BackgroundTransparency = 1
    container.Size = UDim2.new(1, 0, 1, 0)
    container.Parent = screenGui
    
    return container
end

-- Animate notification in
local function animateIn(notification)
    local frame = notification.Frame
    local messageLabel = frame:WaitForChild("Message")
    
    -- Wait for text to wrap and calculate proper size
    RunService.Heartbeat:Wait()
    local height = messageLabel.AbsoluteSize.Y + Config.PADDING * 2
    
    frame.Size = UDim2.new(0, Config.MAX_WIDTH, 0, 0)
    frame.Position = UDim2.new(0.5, -Config.MAX_WIDTH/2, 0.7, 0)
    frame.BackgroundTransparency = 1
    
    TweenService:Create(
        frame,
        TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
        {
            Size = UDim2.new(0, Config.MAX_WIDTH, 0, height),
            Position = UDim2.new(0.5, -Config.MAX_WIDTH/2, 0.7, -height/2),
            BackgroundTransparency = 0
        }
    ):Play()
    
    for _, child in pairs(frame:GetDescendants()) do
        if child:IsA("TextLabel") then
            child.TextTransparency = 1
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {TextTransparency = 0}
            ):Play()
        elseif child:IsA("Frame") and child.Name == "ProgressBar" then
            child.BackgroundTransparency = 1
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 0.8}
            ):Play()
        elseif child:IsA("Frame") and child.Name:sub(1,4) == "Glow" then
            child.BackgroundTransparency = 1
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 0.4}
            ):Play()
        elseif child:IsA("Frame") and child.Name:sub(1,13) == "MovingBright" then
            child.BackgroundTransparency = 1
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 0}
            ):Play()
        end
    end

    if notification.AnimateBrightGlow then
        notification.AnimateBrightGlow()
    end
end

-- Animate notification out
local function animateOut(notification, callback)
    local frame = notification.Frame
    
    TweenService:Create(
        frame,
        TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.In),
        {
            Size = UDim2.new(0, Config.MAX_WIDTH, 0, 0),
            Position = UDim2.new(0.5, -Config.MAX_WIDTH/2, 0.7, 0),
            BackgroundTransparency = 1
        }
    ):Play()
    
    for _, child in pairs(frame:GetDescendants()) do
        if child:IsA("TextLabel") then
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {TextTransparency = 1}
            ):Play()
        elseif child:IsA("Frame") and child.Name == "ProgressBar" then
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 1}
            ):Play()
        elseif child:IsA("Frame") and child.Name:sub(1,4) == "Glow" then
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 1}
            ):Play()
        elseif child:IsA("Frame") and child.Name:sub(1,13) == "MovingBright" then
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 1}
            ):Play()
        end
    end
    
    task.delay(Config.FADE_TIME, function()
        if callback then callback() end
    end)
end

-- Create notification UI
local function createNotification(options)
    local message = options.message or ""
    local duration = options.duration or Config.DEFAULT_DURATION

    local frame = Instance.new("Frame")
    frame.Name = "Notification"
    frame.BackgroundColor3 = Config.COLORS.BACKGROUND
    frame.BorderSizePixel = 0
    frame.ClipsDescendants = true

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS)
    corner.Parent = frame

    local outline = Instance.new("UIStroke")
    outline.Color = Config.COLORS.GLOW
    outline.Thickness = 6
    outline.Transparency = 0.15
    outline.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    outline.Parent = frame

    local function createGlowEdge(name, size, pos)
        local edge = Instance.new("Frame")
        edge.Name = name
        edge.BackgroundColor3 = Config.COLORS.GLOW
        edge.BackgroundTransparency = 0.4
        edge.BorderSizePixel = 0
        edge.Size = size
        edge.Position = pos
        edge.ZIndex = 3
        edge.Parent = frame
        local edgeCorner = Instance.new("UICorner")
        edgeCorner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS + 6)
        edgeCorner.Parent = edge
        for i = 1, 2 do
            local blurLayer = Instance.new("Frame")
            blurLayer.Name = name.."_Blur"..i
            blurLayer.BackgroundColor3 = Config.COLORS.GLOW
            blurLayer.BackgroundTransparency = 0.7 + 0.07*i
            blurLayer.BorderSizePixel = 0
            blurLayer.Size = size + UDim2.new(0, i*4, 0, i*4)
            blurLayer.Position = pos + UDim2.new(0, -2*i, 0, -2*i)
            blurLayer.ZIndex = 2
            blurLayer.Parent = frame
            local blurCorner = Instance.new("UICorner")
            blurCorner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS + 8 + i*2)
            blurCorner.Parent = blurLayer
        end
        return edge
    end
    local offset = math.floor(0.15 * 36)
    createGlowEdge("GlowTop", UDim2.new(1, offset*2, 0, 8), UDim2.new(0, -offset, 0, -offset-8))
    createGlowEdge("GlowBottom", UDim2.new(1, offset*2, 0, 8), UDim2.new(0, -offset, 1, offset))
    createGlowEdge("GlowLeft", UDim2.new(0, 8, 1, offset*2), UDim2.new(0, -offset-8, 0, -offset))
    createGlowEdge("GlowRight", UDim2.new(0, 8, 1, offset*2), UDim2.new(1, offset, 0, -offset))

    -- Animated moving bright red-pink gradient glow
    local AnimateBrightGlow
    do
        local runners = {}

        -- Helper to make a "runner" with a UIGradient
        local function makeRunner(name, size, pos, rotation)
            local f = Instance.new("Frame")
            f.Name = name
            f.BackgroundColor3 = Color3.new(1,1,1)
            f.BackgroundTransparency = 1
            f.BorderSizePixel = 0
            f.Size = size
            f.Position = pos
            f.ZIndex = 5
            local c = Instance.new("UICorner")
            c.CornerRadius = UDim.new(0, Config.CORNER_RADIUS + 8)
            c.Parent = f
            local grad = Instance.new("UIGradient")
            grad.Rotation = rotation
            grad.Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0.00, Config.COLORS.BRIGHT_GLOW_START),
                ColorSequenceKeypoint.new(0.50, Config.COLORS.BRIGHT_GLOW_END),
                ColorSequenceKeypoint.new(1.00, Config.COLORS.BRIGHT_GLOW_START)
            }
            grad.Parent = f
            f.Parent = frame
            return f, grad
        end

        -- Top runner (horizontal)
        runners.Top, runners.TopGrad = makeRunner("MovingBrightTop", UDim2.new(0, 60, 0, 8), UDim2.new(0, -offset, 0, -offset-10), 0)
        -- Bottom runner (horizontal)
        runners.Bottom, runners.BottomGrad = makeRunner("MovingBrightBottom", UDim2.new(0, 60, 0, 8), UDim2.new(0, -offset, 1, offset), 0)
        -- Left runner (vertical)
        runners.Left, runners.LeftGrad = makeRunner("MovingBrightLeft", UDim2.new(0, 8, 0, 60), UDim2.new(0, -offset-10, 0, -offset), 90)
        -- Right runner (vertical)
        runners.Right, runners.RightGrad = makeRunner("MovingBrightRight", UDim2.new(0, 8, 0, 60), UDim2.new(1, offset, 0, -offset), 90)
        
        local animating = true
        local cleanupTweens = {}

        AnimateBrightGlow = function()
            animating = true

            local function animateRunner(runner, pos0, pos1, prop)
                runner.BackgroundTransparency = 0
                while animating and runner.Parent do
                    local tw = TweenService:Create(
                        runner,
                        TweenInfo.new(1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                        {[prop] = pos1}
                    )
                    tw:Play()
                    table.insert(cleanupTweens, tw)
                    tw.Completed:Wait()
                    runner.BackgroundTransparency = 1
                    runner[prop] = pos0
                    wait(0.1)
                    runner.BackgroundTransparency = 0
                end
            end

            coroutine.wrap(function() animateRunner(
                runners.Top,
                UDim2.new(0, -offset, 0, -offset-10),
                UDim2.new(1, offset-60, 0, -offset-10),
                "Position"
            ) end)()
            coroutine.wrap(function() animateRunner(
                runners.Bottom,
                UDim2.new(0, -offset, 1, offset),
                UDim2.new(1, offset-60, 1, offset),
                "Position"
            ) end)()
            coroutine.wrap(function() animateRunner(
                runners.Left,
                UDim2.new(0, -offset-10, 0, -offset),
                UDim2.new(0, -offset-10, 1, offset-60),
                "Position"
            ) end)()
            coroutine.wrap(function() animateRunner(
                runners.Right,
                UDim2.new(1, offset, 0, -offset),
                UDim2.new(1, offset, 1, offset-60),
                "Position"
            ) end)()

            -- Animate color gradient for all runners
            for _, grad in pairs{runners.TopGrad, runners.BottomGrad, runners.LeftGrad, runners.RightGrad} do
                table.insert(cleanupTweens, tweenColor(
                    grad, "Color",
                    ColorSequence.new{
                        ColorSequenceKeypoint.new(0.00, Config.COLORS.BRIGHT_GLOW_START),
                        ColorSequenceKeypoint.new(0.50, Config.COLORS.BRIGHT_GLOW_END),
                        ColorSequenceKeypoint.new(1.00, Config.COLORS.BRIGHT_GLOW_START)
                    },
                    ColorSequence.new{
                        ColorSequenceKeypoint.new(0.00, Config.COLORS.BRIGHT_GLOW_END),
                        ColorSequenceKeypoint.new(0.50, Config.COLORS.BRIGHT_GLOW_START),
                        ColorSequenceKeypoint.new(1.00, Config.COLORS.BRIGHT_GLOW_END)
                    },
                    1.5
                ))
            end
        end

        frame.AncestryChanged:Connect(function(_, parent)
            if not parent then
                animating = false
                for _, c in ipairs(cleanupTweens) do
                    if type(c) == "function" then c() end
                end
            end
        end)
    end

    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "Message"
    messageLabel.BackgroundTransparency = 1
    messageLabel.Size = UDim2.new(1, -Config.PADDING * 2, 0, 0)
    messageLabel.Position = UDim2.new(0, Config.PADDING, 0, Config.PADDING)
    messageLabel.Font = Config.FONT
    messageLabel.TextSize = Config.MESSAGE_SIZE
    messageLabel.TextColor3 = Config.COLORS.TEXT
    messageLabel.TextWrapped = true
    messageLabel.AutomaticSize = Enum.AutomaticSize.Y
    messageLabel.Text = message
    messageLabel.ZIndex = 4
    messageLabel.Parent = frame

    local progressBar = Instance.new("Frame")
    progressBar.Name = "ProgressBar"
    progressBar.BorderSizePixel = 0
    progressBar.BackgroundColor3 = Config.COLORS.PROGRESS
    progressBar.BackgroundTransparency = 0.8
    progressBar.Size = UDim2.new(1, 0, 0, 2)
    progressBar.Position = UDim2.new(0, 0, 1, -2)
    progressBar.ZIndex = 4
    progressBar.Parent = frame

    frame.ZIndex = 3
    frame.Parent = container

    local notification = {
        Frame = frame,
        StartTime = tick(),
        Duration = duration,
        AnimateBrightGlow = AnimateBrightGlow,
    }

    local sound = Instance.new("Sound")
    sound.SoundId = Config.SOUNDS.SHOW
    sound.Volume = 0.5
    sound.Parent = frame
    sound:Play()
    game:GetService("Debris"):AddItem(sound, 1)

    TweenService:Create(
        progressBar,
        TweenInfo.new(duration, Enum.EasingStyle.Linear),
        {Size = UDim2.new(0, 0, 0, 2)}
    ):Play()

    if activeNotification then
        NotificationSystem.close(activeNotification)
    end
    activeNotification = notification

    animateIn(notification)
    task.delay(duration, function()
        NotificationSystem.close(notification)
    end)

    return notification
end

function NotificationSystem.close(notification)
    if notification ~= activeNotification then return end

    local sound = Instance.new("Sound")
    sound.SoundId = Config.SOUNDS.HIDE
    sound.Volume = 0.5
    sound.Parent = notification.Frame
    sound:Play()

    animateOut(notification, function()
        notification.Frame:Destroy()
        activeNotification = nil
    end)
end

function NotificationSystem.init()
    createContainer()
    return NotificationSystem
end

function NotificationSystem.notify(options)
    if not container then NotificationSystem.init() end
    return createNotification(options)
end

function NotificationSystem.log(message, duration)
    return NotificationSystem.notify({
        message = message,
        duration = duration
    })
end

return setmetatable(NotificationSystem, {
    __call = function(_, ...)
        return NotificationSystem.log(...)
    end
})
